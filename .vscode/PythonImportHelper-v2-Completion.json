[
    {
        "label": "enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enum",
        "description": "enum",
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Gender",
        "importPath": "enums.gender",
        "description": "enums.gender",
        "isExtraImport": true,
        "detail": "enums.gender",
        "documentation": {}
    },
    {
        "label": "Gender",
        "importPath": "enums.gender",
        "description": "enums.gender",
        "isExtraImport": true,
        "detail": "enums.gender",
        "documentation": {}
    },
    {
        "label": "InstallmentStatus",
        "importPath": "enums.installment_status",
        "description": "enums.installment_status",
        "isExtraImport": true,
        "detail": "enums.installment_status",
        "documentation": {}
    },
    {
        "label": "InstallmentStatus",
        "importPath": "enums.installment_status",
        "description": "enums.installment_status",
        "isExtraImport": true,
        "detail": "enums.installment_status",
        "documentation": {}
    },
    {
        "label": "PaymentType",
        "importPath": "enums.payment_type",
        "description": "enums.payment_type",
        "isExtraImport": true,
        "detail": "enums.payment_type",
        "documentation": {}
    },
    {
        "label": "PaymentType",
        "importPath": "enums.payment_type",
        "description": "enums.payment_type",
        "isExtraImport": true,
        "detail": "enums.payment_type",
        "documentation": {}
    },
    {
        "label": "PaymentType",
        "importPath": "enums.payment_type",
        "description": "enums.payment_type",
        "isExtraImport": true,
        "detail": "enums.payment_type",
        "documentation": {}
    },
    {
        "label": "utc_now",
        "importPath": "utils.utc_now",
        "description": "utils.utc_now",
        "isExtraImport": true,
        "detail": "utils.utc_now",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "enums.user_role",
        "description": "enums.user_role",
        "isExtraImport": true,
        "detail": "enums.user_role",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "enums.user_role",
        "description": "enums.user_role",
        "isExtraImport": true,
        "detail": "enums.user_role",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "NoResultFound",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "NoResultFound",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "NoResultFound",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "NoResultFound",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "models.customer",
        "description": "models.customer",
        "isExtraImport": true,
        "detail": "models.customer",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Installment",
        "importPath": "models.installment",
        "description": "models.installment",
        "isExtraImport": true,
        "detail": "models.installment",
        "documentation": {}
    },
    {
        "label": "OrderItem",
        "importPath": "models.order_item",
        "description": "models.order_item",
        "isExtraImport": true,
        "detail": "models.order_item",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "models.product",
        "description": "models.product",
        "isExtraImport": true,
        "detail": "models.product",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "models.product",
        "description": "models.product",
        "isExtraImport": true,
        "detail": "models.product",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "models.order",
        "description": "models.order",
        "isExtraImport": true,
        "detail": "models.order",
        "documentation": {}
    },
    {
        "label": "BarCode",
        "importPath": "models.bar_code",
        "description": "models.bar_code",
        "isExtraImport": true,
        "detail": "models.bar_code",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "utils.security",
        "description": "utils.security",
        "isExtraImport": true,
        "detail": "utils.security",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ttkbootstrap.constants",
        "description": "ttkbootstrap.constants",
        "isExtraImport": true,
        "detail": "ttkbootstrap.constants",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ttkbootstrap.constants",
        "description": "ttkbootstrap.constants",
        "isExtraImport": true,
        "detail": "ttkbootstrap.constants",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ttkbootstrap.constants",
        "description": "ttkbootstrap.constants",
        "isExtraImport": true,
        "detail": "ttkbootstrap.constants",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ttkbootstrap.constants",
        "description": "ttkbootstrap.constants",
        "isExtraImport": true,
        "detail": "ttkbootstrap.constants",
        "documentation": {}
    },
    {
        "label": "ttkbootstrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ttkbootstrap",
        "description": "ttkbootstrap",
        "detail": "ttkbootstrap",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "ttkbootstrap",
        "description": "ttkbootstrap",
        "isExtraImport": true,
        "detail": "ttkbootstrap",
        "documentation": {}
    },
    {
        "label": "Notebook",
        "importPath": "ttkbootstrap",
        "description": "ttkbootstrap",
        "isExtraImport": true,
        "detail": "ttkbootstrap",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "SALT",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "DB_URL",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Tk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Tk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ProductsFrame",
        "importPath": "frames.products",
        "description": "frames.products",
        "isExtraImport": true,
        "detail": "frames.products",
        "documentation": {}
    },
    {
        "label": "CouponFrame",
        "importPath": "frames.coupon",
        "description": "frames.coupon",
        "isExtraImport": true,
        "detail": "frames.coupon",
        "documentation": {}
    },
    {
        "label": "clear_window",
        "importPath": "utils.window",
        "description": "utils.window",
        "isExtraImport": true,
        "detail": "utils.window",
        "documentation": {}
    },
    {
        "label": "LoginFrame",
        "importPath": "frames.login",
        "description": "frames.login",
        "isExtraImport": true,
        "detail": "frames.login",
        "documentation": {}
    },
    {
        "label": "Gender",
        "kind": 6,
        "importPath": "src.enums.gender",
        "description": "src.enums.gender",
        "peekOfCode": "class Gender(Enum):\n    MALE = 0\n    FEMALE = 1",
        "detail": "src.enums.gender",
        "documentation": {}
    },
    {
        "label": "InstallmentStatus",
        "kind": 6,
        "importPath": "src.enums.installment_status",
        "description": "src.enums.installment_status",
        "peekOfCode": "class InstallmentStatus(enum.Enum):\n    PENDING = \"PENDING\"\n    PAID = \"PAID\"\n    CANCELED = \"CANCELED\"",
        "detail": "src.enums.installment_status",
        "documentation": {}
    },
    {
        "label": "PaymentType",
        "kind": 6,
        "importPath": "src.enums.payment_type",
        "description": "src.enums.payment_type",
        "peekOfCode": "class PaymentType(Enum):\n    CASH = \"CASH\"\n    INSTALLMENTS = \"INSTALLMENTS\"",
        "detail": "src.enums.payment_type",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "kind": 6,
        "importPath": "src.enums.user_role",
        "description": "src.enums.user_role",
        "peekOfCode": "class UserRole(Enum):\n    USER = \"USER\"\n    ADMIN = \"ADMIN\"",
        "detail": "src.enums.user_role",
        "documentation": {}
    },
    {
        "label": "BarCode",
        "kind": 6,
        "importPath": "src.models.bar_code",
        "description": "src.models.bar_code",
        "peekOfCode": "class BarCode(Base):\n    __tablename__ = \"product_barcodes\"\n    id = Column(Integer, primary_key=True)\n    code = Column(String(50), nullable=False, index=True)\n    product_id = Column(Integer, ForeignKey(\"products.id\"))\n    product = relationship(\"Product\", back_populates=\"bar_codes\")",
        "detail": "src.models.bar_code",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "src.models.base",
        "description": "src.models.base",
        "peekOfCode": "Base = declarative_base()",
        "detail": "src.models.base",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "src.models.customer",
        "description": "src.models.customer",
        "peekOfCode": "class Customer(Base):\n    __tablename__ = \"customers\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String(250), nullable=False)\n    cpf = Column(String(30), nullable=False)\n    state = Column(String(80), nullable=False)\n    city = Column(String(120), nullable=False)\n    address = Column(String(250), nullable=False)\n    phone = Column(String(80), nullable=False)\n    email = Column(String(150), nullable=False)",
        "detail": "src.models.customer",
        "documentation": {}
    },
    {
        "label": "Installment",
        "kind": 6,
        "importPath": "src.models.installment",
        "description": "src.models.installment",
        "peekOfCode": "class Installment(Base):\n    __tablename__ = \"installments\"\n    id = Column(Integer, primary_key=True)\n    order_id = Column(Integer, nullable=False)\n    seller_id = Column(Integer, nullable=False)\n    customer_id = Column(Integer, nullable=False)\n    must_be_paid_at = Column(Date, nullable=False)\n    paid_at = Column(DateTime, nullable=True)\n    received_by_seller_id = Column(Integer, nullable=True)\n    amount = Column(Float, default=0.0)",
        "detail": "src.models.installment",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "src.models.order",
        "description": "src.models.order",
        "peekOfCode": "class Order(Base):\n    __tablename__ = \"orders\"\n    id = Column(Integer, primary_key=True)\n    seller_id = Column(Integer, nullable=False)\n    customer_id = Column(Integer, nullable=False)\n    total_price = Column(Float, default=0)\n    payment_type = Column(Enum(PaymentType), nullable=False)\n    created_at = Column(DateTime, default=utc_now)",
        "detail": "src.models.order",
        "documentation": {}
    },
    {
        "label": "OrderItem",
        "kind": 6,
        "importPath": "src.models.order_item",
        "description": "src.models.order_item",
        "peekOfCode": "class OrderItem(Base):\n    __tablename__ = \"order_items\"\n    id = Column(Integer, primary_key=True)\n    order_id = Column(Integer, ForeignKey(\"orders.id\"), nullable=False)\n    product_id = Column(Integer, nullable=False)\n    quantity = Column(Integer, default=1)\n    price = Column(Float, default=0.0)",
        "detail": "src.models.order_item",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "src.models.product",
        "description": "src.models.product",
        "peekOfCode": "class Product(Base):\n    __tablename__ = \"products\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String(250), nullable=False)\n    buy_price = Column(Float, default=0.0)\n    sell_price = Column(Float, default=0.0)\n    stock = Column(Integer, default=0)\n    bar_codes = relationship(\"ProductBarCode\", back_populates=\"product\", cascade=\"all, delete-orphan\")",
        "detail": "src.models.product",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "src.models.user",
        "description": "src.models.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    username = Column(String(150), unique=True, nullable=False)\n    name = Column(String(250))\n    role = Column(Enum(UserRole), nullable=False)\n    password = Column(String(256))",
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "create_customer",
        "kind": 2,
        "importPath": "src.services.curstomers",
        "description": "src.services.curstomers",
        "peekOfCode": "def create_customer(\n    name: str,\n    cpf: str,\n    state: str,\n    city: str,\n    address: str,\n    phone: str,\n    email: str,\n    gender: Gender\n):",
        "detail": "src.services.curstomers",
        "documentation": {}
    },
    {
        "label": "update_customer",
        "kind": 2,
        "importPath": "src.services.curstomers",
        "description": "src.services.curstomers",
        "peekOfCode": "def update_customer(customer_id, **kwargs):\n    session = SessionLocal()\n    try:\n        customer = session.query(Customer).filter(Customer.id == customer_id).one()\n        for field, value in kwargs.items():\n            if hasattr(Customer, field):\n                setattr(customer, field, value)\n        session.commit()\n        return customer\n    except NoResultFound:",
        "detail": "src.services.curstomers",
        "documentation": {}
    },
    {
        "label": "delete_customer",
        "kind": 2,
        "importPath": "src.services.curstomers",
        "description": "src.services.curstomers",
        "peekOfCode": "def delete_customer(customer_id):\n    session = SessionLocal()\n    try:\n        customer = session.query(Customer).filter(Customer.id == customer_id).one()\n        session.delete(customer)\n        session.commit()\n        return True\n    except NoResultFound:\n        session.rollback()\n        raise ValueError(\"Cliente não encontrado\")",
        "detail": "src.services.curstomers",
        "documentation": {}
    },
    {
        "label": "find_all_customers",
        "kind": 2,
        "importPath": "src.services.curstomers",
        "description": "src.services.curstomers",
        "peekOfCode": "def find_all_customers():\n    session = SessionLocal()\n    try:\n        return session.query(Customer).all()\n    finally:\n        session.close()\ndef find_first_customer(**filters):\n    session = SessionLocal()\n    try:\n        query = session.query(Customer)",
        "detail": "src.services.curstomers",
        "documentation": {}
    },
    {
        "label": "find_first_customer",
        "kind": 2,
        "importPath": "src.services.curstomers",
        "description": "src.services.curstomers",
        "peekOfCode": "def find_first_customer(**filters):\n    session = SessionLocal()\n    try:\n        query = session.query(Customer)\n        for field, value in filters.items():\n            if hasattr(Customer, field):\n                query = query.filter(getattr(Customer, field) == value)\n        return query.first()\n    finally:\n        session.close()",
        "detail": "src.services.curstomers",
        "documentation": {}
    },
    {
        "label": "create_order",
        "kind": 2,
        "importPath": "src.services.orders",
        "description": "src.services.orders",
        "peekOfCode": "def create_order(\n    seller_id: int,\n    customer_id: int,\n    items: list[dict],\n    payment_type: PaymentType,\n    installments: int = 1\n) -> Order:\n    session = SessionLocal()\n    try:\n        product_ids = [i[\"product_id\"] for i in items]",
        "detail": "src.services.orders",
        "documentation": {}
    },
    {
        "label": "find_all_orders",
        "kind": 2,
        "importPath": "src.services.orders",
        "description": "src.services.orders",
        "peekOfCode": "def find_all_orders() -> list[Order]:\n    session = SessionLocal()\n    try:\n        return session.query(Order).all()\n    finally:\n        session.close()\ndef find_first_order(**filters) -> Order | None:\n    session = SessionLocal()\n    try:\n        query = session.query(Order)",
        "detail": "src.services.orders",
        "documentation": {}
    },
    {
        "label": "find_first_order",
        "kind": 2,
        "importPath": "src.services.orders",
        "description": "src.services.orders",
        "peekOfCode": "def find_first_order(**filters) -> Order | None:\n    session = SessionLocal()\n    try:\n        query = session.query(Order)\n        for field, value in filters.items():\n            if hasattr(Order, field):\n                query = query.filter(getattr(Order, field) == value)\n        return query.first()\n    finally:\n        session.close()",
        "detail": "src.services.orders",
        "documentation": {}
    },
    {
        "label": "delete_order",
        "kind": 2,
        "importPath": "src.services.orders",
        "description": "src.services.orders",
        "peekOfCode": "def delete_order(order_id: int) -> bool:\n    session = SessionLocal()\n    try:\n        order = session.query(Order).filter(Order.id == order_id).one()\n        session.delete(order)\n        session.commit()\n        return True\n    except NoResultFound:\n        session.rollback()\n        raise ValueError(\"Pedido não encontrado\")",
        "detail": "src.services.orders",
        "documentation": {}
    },
    {
        "label": "create_product",
        "kind": 2,
        "importPath": "src.services.products",
        "description": "src.services.products",
        "peekOfCode": "def create_product(name, buy_price=0, sell_price=0, stock=0, bar_codes=None):\n    session = SessionLocal()\n    try:\n        product = Product(\n            name=name,\n            buy_price=buy_price,\n            sell_price=sell_price,\n            stock=stock\n        )\n        session.add(product)",
        "detail": "src.services.products",
        "documentation": {}
    },
    {
        "label": "update_product",
        "kind": 2,
        "importPath": "src.services.products",
        "description": "src.services.products",
        "peekOfCode": "def update_product(product_id, **kwargs):\n    session = SessionLocal()\n    try:\n        product = session.query(Product).filter(Product.id == product_id).one()\n        bar_codes = kwargs.pop(\"bar_codes\", None)\n        for field, value in kwargs.items():\n            if hasattr(Product, field):\n                setattr(product, field, value)\n        if bar_codes is not None:\n            session.query(BarCode).filter(BarCode.product_id == product_id).delete()",
        "detail": "src.services.products",
        "documentation": {}
    },
    {
        "label": "delete_product",
        "kind": 2,
        "importPath": "src.services.products",
        "description": "src.services.products",
        "peekOfCode": "def delete_product(product_id):\n    session = SessionLocal()\n    try:\n        product = session.query(Product).filter(Product.id == product_id).one()\n        session.delete(product)\n        session.commit()\n        return True\n    except NoResultFound:\n        session.rollback()\n        raise ValueError(\"Produto não encontrado\")",
        "detail": "src.services.products",
        "documentation": {}
    },
    {
        "label": "find_all_products",
        "kind": 2,
        "importPath": "src.services.products",
        "description": "src.services.products",
        "peekOfCode": "def find_all_products():\n    session = SessionLocal()\n    try:\n        return session.query(Product).all()\n    finally:\n        session.close()\ndef find_first_product(**filters):\n    session = SessionLocal()\n    try:\n        query = session.query(Product)",
        "detail": "src.services.products",
        "documentation": {}
    },
    {
        "label": "find_first_product",
        "kind": 2,
        "importPath": "src.services.products",
        "description": "src.services.products",
        "peekOfCode": "def find_first_product(**filters):\n    session = SessionLocal()\n    try:\n        query = session.query(Product)\n        for field, value in filters.items():\n            if hasattr(Product, field):\n                query = query.filter(getattr(Product, field) == value)\n        return query.first()\n    finally:\n        session.close()",
        "detail": "src.services.products",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "src.services.users",
        "description": "src.services.users",
        "peekOfCode": "def create_user(username, name, role, password):\n    session = SessionLocal()\n    try:\n        user = User(\n            username=username,\n            name=name,\n            role=role,\n            password=hash_password(password)\n        )\n        session.add(user)",
        "detail": "src.services.users",
        "documentation": {}
    },
    {
        "label": "update_user",
        "kind": 2,
        "importPath": "src.services.users",
        "description": "src.services.users",
        "peekOfCode": "def update_user(\n    user_id: str,\n    username: Optional[str]=None,\n    name: Optional[str]=None,\n    role: Optional[UserRole]=None,\n    password=None\n):\n    session = SessionLocal()\n    try:\n        user = session.query(User).filter(User.id == user_id).one()",
        "detail": "src.services.users",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "kind": 2,
        "importPath": "src.services.users",
        "description": "src.services.users",
        "peekOfCode": "def delete_user(user_id: str):\n    session = SessionLocal()\n    try:\n        user = session.query(User).filter(User.id == user_id).one()\n        session.delete(user)\n        session.commit()\n    except NoResultFound:\n        session.rollback()\n        raise ValueError(\"Usuário não encontrado\")\n    finally:",
        "detail": "src.services.users",
        "documentation": {}
    },
    {
        "label": "find_all_users",
        "kind": 2,
        "importPath": "src.services.users",
        "description": "src.services.users",
        "peekOfCode": "def find_all_users():\n    session = SessionLocal()\n    try:\n        return session.query(User).all()\n    finally:\n        session.close()\ndef find_first_customers(**filters):\n    session = SessionLocal()\n    try:\n        query = session.query(User)",
        "detail": "src.services.users",
        "documentation": {}
    },
    {
        "label": "find_first_customers",
        "kind": 2,
        "importPath": "src.services.users",
        "description": "src.services.users",
        "peekOfCode": "def find_first_customers(**filters):\n    session = SessionLocal()\n    try:\n        query = session.query(User)\n        for field, value in filters.items():\n            if hasattr(User, field):\n                query = query.filter(getattr(User, field) == value)\n        return query.first()\n    finally:\n        session.close()",
        "detail": "src.services.users",
        "documentation": {}
    },
    {
        "label": "BarCodeEntry",
        "kind": 6,
        "importPath": "src.ui.widgets.bar_code_entry",
        "description": "src.ui.widgets.bar_code_entry",
        "peekOfCode": "class BarCodeEntry(ttk.Entry):\n    def __init__(self, master, max_length=13, **kwargs):\n        super().__init__(master, **kwargs)\n        self.max_length = max_length\n        vcmd = self.register(self._validate_input)\n        self.config(\n            validate=\"key\",\n            validatecommand=(vcmd, \"%P\", \"%S\")\n        )\n    def _validate_input(self, new_value: str, char: str):",
        "detail": "src.ui.widgets.bar_code_entry",
        "documentation": {}
    },
    {
        "label": "CurrencyEntry",
        "kind": 6,
        "importPath": "src.ui.widgets.currency_entry",
        "description": "src.ui.widgets.currency_entry",
        "peekOfCode": "class CurrencyEntry(ttk.Entry):\n    def __init__(self, master, **kwargs):\n        super().__init__(master, **kwargs)\n        vcmd = self.register(self._validate_input)\n        self.config(\n            validate=\"key\",\n            validatecommand=(vcmd, \"%S\", \"%P\")\n        )\n    def _validate_input(self, inserted_char: str, new_value: str):\n        if new_value == \"\":",
        "detail": "src.ui.widgets.currency_entry",
        "documentation": {}
    },
    {
        "label": "FloatEntry",
        "kind": 6,
        "importPath": "src.ui.widgets.float_entry",
        "description": "src.ui.widgets.float_entry",
        "peekOfCode": "class FloatEntry(ttk.Entry):\n    def __init__(self, master, **kwargs):\n        super().__init__(master, **kwargs)\n        vcmd = self.register(self._validate_input)\n        self.config(\n            validate=\"key\",\n            validatecommand=(vcmd, \"%S\", \"%P\")\n        )\n    def _validate_input(self, text: str, new_value: str):\n        if text == \"\":",
        "detail": "src.ui.widgets.float_entry",
        "documentation": {}
    },
    {
        "label": "IntEntry",
        "kind": 6,
        "importPath": "src.ui.widgets.int_entry",
        "description": "src.ui.widgets.int_entry",
        "peekOfCode": "class IntEntry(ttk.Entry):\n    def __init__(self, master, **kwargs):\n        super().__init__(master, **kwargs)\n        vcmd = self.register(self._validate_input)\n        self.config(\n            validate=\"key\",\n            validatecommand=(vcmd, '%S')\n        )\n    def _validate_input(self, text: str):\n        return text.isdigit() or text == \"\"",
        "detail": "src.ui.widgets.int_entry",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "src.utils.security",
        "description": "src.utils.security",
        "peekOfCode": "def hash_password(password: str) -> str:\n    return hashlib.sha256((SALT + (password or \"\")).encode(\"utf-8\")).hexdigest()",
        "detail": "src.utils.security",
        "documentation": {}
    },
    {
        "label": "utc_now",
        "kind": 5,
        "importPath": "src.utils.utc_now",
        "description": "src.utils.utc_now",
        "peekOfCode": "utc_now = lambda: datetime.now(timezone.utc)",
        "detail": "src.utils.utc_now",
        "documentation": {}
    },
    {
        "label": "center_window",
        "kind": 2,
        "importPath": "src.utils.window",
        "description": "src.utils.window",
        "peekOfCode": "def center_window(root: Tk) -> None:\n    root.update_idletasks()\n    screen_width = root.winfo_screenwidth()\n    screen_height = root.winfo_screenheight()\n    window_width = root.winfo_width()\n    window_height = root.winfo_height()\n    x = (screen_width - window_width) // 2\n    y = (screen_height - window_height) // 2\n    root.geometry(f\"{window_width}x{window_height}+{x}+{y}\")\ndef clear_window(window: Tk):",
        "detail": "src.utils.window",
        "documentation": {}
    },
    {
        "label": "clear_window",
        "kind": 2,
        "importPath": "src.utils.window",
        "description": "src.utils.window",
        "peekOfCode": "def clear_window(window: Tk):\n    for widget in window.winfo_children():\n        widget.destroy()",
        "detail": "src.utils.window",
        "documentation": {}
    },
    {
        "label": "DB_URL",
        "kind": 5,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "DB_URL = \"sqlite:///erp_data.db\"\nSALT = \"somesalt_fixed\"",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "SALT",
        "kind": 5,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "SALT = \"somesalt_fixed\"",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "init_db",
        "kind": 2,
        "importPath": "src.db",
        "description": "src.db",
        "peekOfCode": "def init_db():\n    Base.metadata.create_all(bind=engine)",
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "src.db",
        "description": "src.db",
        "peekOfCode": "engine = create_engine(DB_URL, echo=False, future=True)\nSessionLocal = sessionmaker(bind=engine, expire_on_commit=False)\nBase = declarative_base()\ndef init_db():\n    Base.metadata.create_all(bind=engine)",
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "src.db",
        "description": "src.db",
        "peekOfCode": "SessionLocal = sessionmaker(bind=engine, expire_on_commit=False)\nBase = declarative_base()\ndef init_db():\n    Base.metadata.create_all(bind=engine)",
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "src.db",
        "description": "src.db",
        "peekOfCode": "Base = declarative_base()\ndef init_db():\n    Base.metadata.create_all(bind=engine)",
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "handle_submit_login_credentials",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def handle_submit_login_credentials(username: str, password: str) -> None:\n    clean_username = username.strip()\n    clean_password = password.strip()\n    if not clean_username:\n        messagebox.showerror(\"ERP - Erro ve validação\", \"Você deve preencher o campo de 'Usuário'!\")\n        return\n    if not clean_password:\n        messagebox.showerror(\"ERP - Erro ve validação\", \"Você deve preencher o campo de 'Senha'!\")\n        return\n    handle_valid_login()",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "handle_valid_login",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def handle_valid_login() -> None:\n    # clear_window(root)\n    root.state(\"zoomed\")\n    notebook = Notebook(root)\n    tabs_cls = [\n        (CouponFrame, \"Cupom\"),\n        (ProductsFrame, \"Produtos\"),\n        (CouponFrame, \"Clientes\"),\n        (CouponFrame, \"Relatórios\"),\n        (CouponFrame, \"Usuários\")",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def main() -> None:\n    # login_frame = LoginFrame(root, on_submit=handle_submit_login_credentials)\n    # login_frame.pack()\n    # root.mainloop()\n    handle_valid_login()\n    root.mainloop()\nif __name__ == \"__main__\":\n    main()",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "style",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "style = Style(\"cosmo\")\nroot: Tk = style.master\nroot.title(\"ERP\")\ndef handle_submit_login_credentials(username: str, password: str) -> None:\n    clean_username = username.strip()\n    clean_password = password.strip()\n    if not clean_username:\n        messagebox.showerror(\"ERP - Erro ve validação\", \"Você deve preencher o campo de 'Usuário'!\")\n        return\n    if not clean_password:",
        "detail": "src.main",
        "documentation": {}
    }
]